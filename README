This repo contains some scripts for use with
[Open Shading Language in Blender Cycles](https://wiki.blender.org/index.php/User:DingTo/OpenShadingLanguage). Some are OSL scripts that may be used directly, while others are Python scripts that generate OSL scripts.

**Copyright**: All OSL scripts (whether generated by Python scripts or included in this repo) are
licensed [CC0](https://creativecommons.org/publicdomain/zero/1.0/). The Python scripts are
licensed CC-BY.

Script Generators
=================

These scripts generate OSL scripts based on the supplied command parameters, such as
operand types, operation to perform, and name to give the shader. Operand types can
be most of the types recognized by OSL, such as `float`, `point`, `color`, often even
`closure color`.

* `osl-gen-compare`

    generates a comparison between two inputs, and uses the result of that comparison to
    select from one of two other inputs for its output: it returns the first of the selection
    inputs if the comparison is false, the second if it is true. For example, the command

        ./osl-gen-compare --comptype=float --seltype=color --name=color_max lt

    generates a computation node script like this:

        shader color_max
          (
            float Cmp1 = float(0),
            float Cmp2 = float(0),
            color Arg1 = color(0),
            color Arg2 = color(0),
            output color Out = color(0)
          )
          {
            Out = Cmp1 < Cmp2 ? Arg2 : Arg1;
          } /*color_max*/

    which returns the selection input (`Arg1` or `Arg2` corresponding to the larger of the two
    same-numbered comparison inputs (`Cmp1` or `Cmp2`).

* `osl-gen-mix`

    generates a multiway mixer of 2 or more inputs according to their relative assigned weights.
    Thus, the actual value of each weight does not matter, only its proportion in comparison
    to the total sum (which must not be 0). For comparison, Blender’s “MixRGB” and “Mix Shader”
    node types take two inputs and a single weight factor that blends between the two inputs.
    Whereas the mixers generated by `osl-gen-mix` can have any number of inputs. Also, you can
    ask for an output giving the summed input weights, to allow correct cascading of multiple
    multiway mixers, so that they behave like a single one. For example, the command

        ./osl-gen-mix --name=mix3_shader --type=closure\ color --inputs=3

    generates a shader node script like this:

        shader mix3_shader
          (
            closure color Input1 = 0,
            float Weight1 = 1,
            closure color Input2 = 0,
            float Weight2 = 1,
            closure color Input3 = 0,
            float Weight3 = 1,
            output closure color Output = 0
          )
          {
            float Weight = Weight1 + Weight2 + Weight3;
            Output = (Input1 * Weight1 + Input2 * Weight2 + Input3 * Weight3) * (1 / Weight);
          } /*mix3_shader*/

    which can be used to mix the outputs of 3 other Cycles shaders in any relative proportions.

* `osl-gen-multi`

    generates a cascaded arithmetic or comparison operation across multiple operands.
    The currently-supported operations are

    + `add` -- sum of all the operands
    + `mul` -- product of all the operands
    + `max` -- maximum of all the operands
    + `min` -- minimum of all the operands

    For example, the command

        ./osl-gen-multi --name=sum --type=float --input=5 add

    generates a computation node script like this

        shader sum
          (
            float Input1 = float(0),
            float Input2 = float(0),
            float Input3 = float(0),
            float Input4 = float(0),
            float Input5 = float(0),
            output float Output = float(0)
          )
          {
            Output = Input1 + Input2 + Input3 + Input4 + Input5;
          } /*sum*/

    which computes the sum of 5 input float values.

Prewritten Scripts
==================

* `atan2.osl`

    This is an alternative to the “atan” function in Cycles’s built-in “Math” node.
    Unlike that, this one takes both its X- and Y- inputs into account, and returns
    an angle that can cover the full circle.

* `scale_coords.osl`

    This is a simpler alternative to Cycles’ “Vector Mapping” node. This just does
    uniform scaling of coordinates. Also the scale factor is a node input, and so
    can be computed from other values.

Lawrence D'Oliveiro <ldo@geek-central.gen.nz>
2016 April 1
