#!/usr/bin/python3
#+
# This script generates an Open Shading Language shader that does a
# piecewise-linear mapping of an input value to an output value.
# Invoke this script as follows:
#
#     osl-gen-ramp --name=«name» --segments=«segments» --type=«type»
#
# where «name» is the name to give to the shader, «segments» is 1 less
# than the integer number of input/output value pairs that will be
# specified--this must be at least 1, and «type» is the type of
# value to interpolate.
#
# Copyright 2017-2018 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY <http://creativecommons.org/licenses/by/4.0/>.
#-

import sys
import getopt

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["name=", "segments=", "type="]
  )
nr_segs = None
shader_name = None
op_type = None
for keyword, value in opts :
    if keyword == "--segments" :
        nr_segs = int(value)
        assert nr_segs > 0
    elif keyword == "--name" :
        shader_name = value
    elif keyword == "--type" :
        op_type = value
    #end if
#end for
if nr_segs == None or shader_name == None or op_type == None :
    raise getopt.GetoptError("missing --name, --segments or --type value")
#end if
is_closure = op_type.startswith("closure")
if is_closure :
    raise getopt.GetoptError("OSL does not allow subtracting closures")
#end if
arg_default = ("%(type)s(0)", "0")[is_closure] % {"type" : op_type}

sys.stdout.write \
  (
        "shader %(name)s\n"
        "  (\n"
        "    float In = 0.0,\n"
        "    output %(type)s Out = %(default)s"
        "%(args)s\n"
        "  )\n"
        " /* generated by osl-gen-ramp. */\n"
        "  {\n"
        "    if (In < In0)\n"
        "        Out = Out0;\n"
        "%(body)s"
        "    else\n"
        "        Out = Out%(nr_segs)d;\n"
        "  } /*%(name)s*/\n"
    %
        {
            "name" : shader_name,
            "type" : op_type,
            "default" : arg_default,
            "args" :
                "".join
                  (
                        ",\n"
                        "    float In%(i)d = %(in_default).3f,%(incond)s\n"
                        "    %(type)s Out%(i)d = %(out_default)s"
                    %
                        {
                            "i" : i,
                            "type" : op_type,
                            "incond" :
                                (
                                    lambda : "",
                                    lambda : " /* must be < In%d */" % (i + 1),
                                )[i < nr_segs](),
                            "in_default" : i / nr_segs,
                            "out_default" : arg_default,
                        }
                    for i in range(nr_segs + 1)
                  ),
            "nr_segs" : nr_segs,
            "body" :
                "".join
                  (
                    "    else if (In < In%(j)d)\n"
                    "        Out = Out%(i)d + (Out%(j)d - Out%(i)d) * (In - In%(i)d) / (In%(j)d - In%(i)d);\n"
                    %
                        {
                            "i" : i,
                            "j" : i + 1,
                        }
                    for i in range(nr_segs)
                  ),
        }
  )
