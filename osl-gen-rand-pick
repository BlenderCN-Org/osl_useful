#!/usr/bin/python3
#+
# This script generates an Open Shading Language shader that returns
# one of its inputs, randomly-chosen according to relative probability
# weights. Invoke it as follows:
#
#     osl-gen-rand-pick --axis=«axis» --name=«name» --type=«type» --inputs=«inputs»
#
# where «axis» is 0, 1 or 2 to indicate which of the 3 available axes of cell
# noise to pick from (to avoid correlations between different nodes using the same
# random seed), «name» is the name to give to the shader, «type» is the type
# of the inputs and output, and «inputs» is the integer number of inputs that
# the shader will pick from (must be last least 2).
#
# «type» can be just about any OSL type, e.g. “float”, “color”, “point”.
# It can also be “closure color” to create a random-picker shader.
#
# Copyright 2016 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY <http://creativecommons.org/licenses/by/4.0/>.
#-

import sys
import getopt

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["axis=", "inputs=", "name=", "type="]
  )
axis = None
nr_inputs = None
shader_name = None
op_type = None
for keyword, value in opts :
    if keyword == "--axis" :
        axis = int(value)
        assert axis in range(0, 3)
    elif keyword == "--inputs" :
        nr_inputs = int(value)
        assert nr_inputs > 1
    elif keyword == "--name" :
        shader_name = value
    elif keyword == "--type" :
        op_type = value
    #end if
#end for
if axis == None or nr_inputs == None or shader_name == None or op_type == None :
    raise getopt.GetoptError("missing --axis, --inputs, --name or --type value")
#end if
is_closure = op_type.startswith("closure")

arg_default = \
    [
        "{type}(0)",
        "0",
    ][is_closure] \
    .format \
      (
        type = op_type
      )
sum_weights = lambda n : " + ".join("Weight{i}".format(i = i + 1) for i in range(n))

def pick_input(i) :
    if i > 1 :
        result = \
            (
                "if (pick >= {sum_weights})\n"
                "        Output = Input{i};\n"
                .format
                  (
                    sum_weights = sum_weights(i - 1),
                    i = i,
                  )
            +
                pick_input(i - 1)
            )
        if i < nr_inputs :
            result = "else " + result
        #end if
    else :
        result = "else\n        Output = Input1;\n"
    #end if
    return \
        "    " + result
#end pick_input

sys.stdout.write \
  (
    "shader {name}\n"
    "  (\n"
    "    point Coord = P,\n"
    "    float Time = 0,\n"
    "{input_args}"
    "    output {type} Output = {arg_default}\n"
    "  )\n"
    "  /* generated by osl-gen-rand-compare. */\n"
    "  {{\n"
    "    point x = noise(\"cell\", Coord, Time);\n"
    "    float pick = x[{axis}] * ({sum_weights});\n"
    "{pick_input}"
    "  }} /*{name}*/\n"
    .format
      (
        name = shader_name,
        type = op_type,
        input_args =
            "".join
              (
                "    {type} Input{i} = {arg_default},\n"
                "    float Weight{i} = 1,\n"
                .format
                  (
                    i = i + 1,
                    type = op_type,
                    arg_default = arg_default,
                  )
                for i in range(nr_inputs)
              ),
        arg_default = arg_default,
        axis = axis,
        sum_weights = sum_weights(nr_inputs),
        pick_input = pick_input(nr_inputs),
      )
  )
